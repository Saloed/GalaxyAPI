"""
Django settings for galaxy_api project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import configparser

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

config = configparser.ConfigParser()
config_path = os.environ.get('CONFIG', None)
if config_path:
    config.read(config_path, encoding='utf-8')

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '-la_p$f%^0b1n)#00t6(rk#un4c4-^zqlmkeeqibl5l9t6)pui'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = config.get('API', 'ALLOWED_HOSTS', fallback='*').split(',')

# Application definition

INSTALLED_APPS = [
    'django.contrib.messages',
    'django.contrib.contenttypes',
    'django.contrib.sites',
    'django.contrib.auth',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_yasg',
    'api'
]

STATIC_URL = '/static/'
STATIC_ROOT = '/var/www/galaxy-api/static/'
SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'galaxy_api.urls'

WSGI_APPLICATION = 'galaxy_api.wsgi.application'

TEMPLATE_LOADERS = [
    'django.template.loaders.app_directories.Loader'
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

API_KEY_HEADER_NAME = 'X-Api-Key'

API_KEY = config.get('API', 'KEY', fallback=None)

SWAGGER_SETTINGS = {
    'DEFAULT_INFO': 'api.urls.api_info',
    'USE_SESSION_AUTH': False,
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            "type": "apiKey",
            "name": API_KEY_HEADER_NAME,
            "in": "header"
        }
    }
}

# Queries directory settings

QUERIES_DIR = os.path.join(BASE_DIR, 'galaxy-descriptions')

# Pagination settings

PAGE_QUERY_PARAM = 'page'
PAGE_SIZE_QUERY_PARAM = 'pagesize'
DEFAULT_PAGE_SIZE = int(config.get('API', 'PAGE_SIZE', fallback=20))

LOG_ROOT = '/var/log/galaxy-api/'

LOG_HANDLERS = ['console', 'logfile', ]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

DEBUG_TRUE_LOG_LEVEL = 'INFO'

DEBUG_FALSE_LOG_LEVEL = config.get('LOG', 'LEVEL', fallback='WARNING')


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    },
    'galaxy_db': {
        'ENGINE': 'sql_server.pyodbc',
        'NAME': config['DATABASE']['NAME'],
        'USER': config['DATABASE']['USER'],
        'PASSWORD': config['DATABASE']['PASSWORD'],
        'HOST': config['DATABASE']['HOST'],
        'PORT': config['DATABASE']['PORT'],

        'OPTIONS': {
            'driver': 'ODBC Driver 17 for SQL Server',
        },
    }
}

SQL_QUERY_CACHE_TIMEOUT_SECONDS = int(config.get('API', 'CACHE_TIMEOUT', fallback=60 * 60))
API_RESPONSE_CACHE_TIMEOUT_SECONDS = int(config.get('API', 'CACHE_TIMEOUT', fallback=60 * 60))

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "unix:///tmp/redis.sock?db=0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

if not os.path.exists(LOG_ROOT):
    os.makedirs(LOG_ROOT)

__debug_log_level = DEBUG_TRUE_LOG_LEVEL if DEBUG else DEBUG_FALSE_LOG_LEVEL

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
    },
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s: %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'logfile': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_ROOT, 'logfile.log'),
            'maxBytes': 5 * 1024 * 1024,
            'backupCount': 1000,
            'encoding': 'utf8',
            'formatter': 'verbose',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'] + list(LOG_HANDLERS),
            'level': 'ERROR',
            'propagate': True,
        },
        'api': {
            'handlers': LOG_HANDLERS,
            'level': __debug_log_level,
            'formatter': 'verbose'
        },
    }
}
